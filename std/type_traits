#pragma once

#include <cstdint>

namespace std {
    // Meta-Funktion
    template<bool B, typename TrueType, typename FalseType>
    struct conditional {
        using type = FalseType;  
    };
    template<typename TrueType, typename FalseType>
    struct conditional<true, TrueType, FalseType> {
        using type = TrueType;  
    };
    // alias-template: nur convinience
    template<bool B, typename TrueType, typename FalseType>
    using conditional_t = typename conditional<B, TrueType, FalseType>::type;    
    
    // Meta-Funktion
    template<typename C1, typename C2>
    struct is_same {
        inline static constexpr bool value{false};
    };
    template<typename C>
    struct is_same<C, C> {
        inline static constexpr bool value{true};
    };
    // Variablen-Template: nur convinience
    template<typename C1, typename C2>
    static inline constexpr bool is_same_v = is_same<C1, C2>::value;
    
    // Meta-Funktion
    template<typename T>
    struct make_unsigned {};
    template<>
    struct make_unsigned<int8_t> {
        using type = uint8_t;  
    };
    template<>
    struct make_unsigned<int16_t> {
        using type = uint16_t;  
    };
    template<>
    struct make_unsigned<int32_t> {
        using type = uint32_t;  
    };
    // alias-template
    template<typename T>
    using make_unsigned_t = typename make_unsigned<T>::type;    
    
    template<typename T>
    struct make_signed {};
    template<>
    struct make_signed<uint8_t> {
        using type = int8_t;  
    };
    template<>
    struct make_signed<uint16_t> {
        using type = int16_t;  
    };
    template<>
    struct make_signed<uint32_t> {
        using type = int32_t;  
    };
    // alias-template
    template<typename T>
    using make_signed_t = typename make_signed<T>::type;    
    
    
    template<typename T>
    struct is_arithmetic {
        static inline constexpr bool value{false};  
    };
    template<>
    struct is_arithmetic<uint8_t> {
        static inline constexpr bool value{true};  
    };
    template<>
    struct is_arithmetic<uint16_t> {
        static inline constexpr bool value{true};  
    };
    template<>
    struct is_arithmetic<uint32_t> {
        static inline constexpr bool value{true};  
    };
    template<>
    struct is_arithmetic<int8_t> {
        static inline constexpr bool value{true};  
    };
    template<>
    struct is_arithmetic<int16_t> {
        static inline constexpr bool value{true};  
    };
    template<>
    struct is_arithmetic<int32_t> {
        static inline constexpr bool value{true};  
    };
    
    // Variablen template
    template<typename T>
    static inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;
    
    
    template<typename T>
    struct is_unsigned {
        static inline constexpr bool value{false};  
    };
    template<>
    struct is_unsigned<uint8_t> {
        static inline constexpr bool value{true};  
    };
    template<>
    struct is_unsigned<uint16_t> {
        static inline constexpr bool value{true};  
    };
    template<>
    struct is_unsigned<uint32_t> {
        static inline constexpr bool value{true};  
    };
    template<typename T>
    static inline constexpr bool is_unsigned_v = is_unsigned<T>::value;
    

    template<typename T>
    struct is_signed {
        static inline constexpr bool value{false};  
    };
    template<>
    struct is_signed<int8_t> {
        static inline constexpr bool value{true};  
    };
    template<>
    struct is_signed<int16_t> {
        static inline constexpr bool value{true};  
    };
    template<>
    struct is_signed<int32_t> {
        static inline constexpr bool value{true};  
    };
    template<typename T>
    static inline constexpr bool is_signed_v = is_signed<T>::value;
    
    
    
    
    
    
    
    template<typename T, T v>
    struct integral_constant {
        static inline constexpr T value = v;
        using value_type = T;
    };
}
